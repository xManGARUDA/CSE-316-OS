#include<stdio.h>

void calcNeedMatrix(int all[5][4], int m[5][4], int n[5][4]) 
{
    for(int i =0; i< 5; i++)
        for(int k = 0; k < 4; k++)
            n[i][k] = m[i][k] - all[i][k];
}

int main()
{
    int allocation[5][4] = {{0, 0, 1, 2}, {1,0,0,0}, {1,3,5,4}, {0,6,3,2}, {0,0,1,4}};
    int max[5][4] = {{0, 0, 1, 2}, {1, 7, 5, 0}, {2, 3, 5, 6}, {0, 6, 5, 2}, {0, 6, 5, 6}};
    int need[5][4];
    calcNeedMatrix(allocation, max, need); //// we find need matrix : matrix=max-allocation
    int available[4] = {1, 5, 2, 0};
    int executed[5] = {0, 0 , 0 , 0, 0};
    if(isSafe(allocation, need, executed, available)) // if need<= available  then, execute process; else: do not execute and go forward;
    {
        printf("The system is in safe mode");
    }
    else
    {
        printf("The Sytsem is in unsafe mode");
    }
    return 0;
}

int isSafe(int all[5][4], int n[5][4], int exec[5], int av[4])
{
    int run = 1;
    while(run)
    {
        run = 0;
        for(int i=0; i < 5; i++)
        {
            if(exec[i] == 0 && (n[i][0] <= av[0]) && (n[i][1] <= av[1]) && (n[i][2] <= av[2]))
            {
                run = 1;
                exec[i]  = 1;
                av[0] = av[0] + all[i][0];
                av[1] = av[1] + all[i][1];
                av[2] = av[2] + all[i][2];
            }
        }
    }
    for(int j =0; j < 5; j++)
        if(exec[j] == 0)
            return 0;
    return 1;
}
